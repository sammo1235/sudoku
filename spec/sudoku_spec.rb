require 'sudoku'

RSpec.describe Sudoku, "#solve" do
  context "with easy puzzles" do
    it "will solve" do
      solution_1 = Sudoku.new([
                  [0,6,8,4,0,2,1,0,0],
                  [0,0,0,9,0,0,8,0,7],
                  [0,0,0,6,0,0,0,0,4],
                  [0,8,0,1,0,3,7,4,9],
                  [7,3,4,0,8,0,6,0,0],
                  [0,1,9,7,0,0,3,5,0],
                  [8,0,0,0,9,0,0,7,6],
                  [0,0,3,0,6,0,9,8,1],
                  [0,2,0,0,0,7,4,0,0]
                ]).solve

      expect(solution_1).to eq([
        [5, 6, 8, 4, 7, 2, 1, 9, 3],
        [3, 4, 2, 9, 5, 1, 8, 6, 7],
        [1, 9, 7, 6, 3, 8, 5, 2, 4],
        [6, 8, 5, 1, 2, 3, 7, 4, 9],
        [7, 3, 4, 5, 8, 9, 6, 1, 2],
        [2, 1, 9, 7, 4, 6, 3, 5, 8],
        [8, 5, 1, 3, 9, 4, 2, 7, 6],
        [4, 7, 3, 2, 6, 5, 9, 8, 1],
        [9, 2, 6, 8, 1, 7, 4, 3, 5]
      ])
    end
  end

  context "with medium puzzles" do
    it "will solve" do
      solution_1 = Sudoku.new([
                  [5,0,1,0,0,9,0,0,0],
                  [2,0,9,7,3,0,0,1,5],
                  [0,7,3,0,0,0,0,2,8],
                  [0,0,5,8,0,0,6,0,2],
                  [0,4,0,0,2,7,8,0,0],
                  [7,2,8,1,0,3,0,0,0],
                  [3,0,7,0,0,6,0,0,0],
                  [8,1,0,4,7,0,3,9,6],
                  [0,0,0,0,0,2,1,0,0]
                ]).solve

      expect(solution_1).to eq([
        [5, 8, 1, 2, 4, 9, 7, 6, 3],
        [2, 6, 9, 7, 3, 8, 4, 1, 5],
        [4, 7, 3, 6, 5, 1, 9, 2, 8],
        [1, 3, 5, 8, 9, 4, 6, 7, 2],
        [9, 4, 6, 5, 2, 7, 8, 3, 1],
        [7, 2, 8, 1, 6, 3, 5, 4, 9],
        [3, 5, 7, 9, 1, 6, 2, 8, 4],
        [8, 1, 2, 4, 7, 5, 3, 9, 6],
        [6, 9, 4, 3, 8, 2, 1, 5, 7]
      ])

      solution_2 = Sudoku.new([
                  [0,7,0,3,0,2,0,0,8],
                  [2,0,1,0,5,0,0,0,3],
                  [8,0,0,0,7,0,0,0,0],
                  [3,0,0,2,0,0,0,8,0],
                  [0,0,6,0,0,0,3,0,0],
                  [4,5,0,8,0,3,0,0,9],
                  [6,0,7,0,0,9,0,1,5],
                  [0,4,0,0,0,0,0,0,0],
                  [0,9,8,5,2,0,0,0,0]
                ]).solve

      expect(solution_2).to eq([
        [9, 7, 4, 3, 1, 2, 6, 5, 8],
        [2, 6, 1, 9, 5, 8, 7, 4, 3],
        [8, 3, 5, 6, 7, 4, 2, 9, 1],
        [3, 1, 9, 2, 4, 7, 5, 8, 6],
        [7, 8, 6, 1, 9, 5, 3, 2, 4],
        [4, 5, 2, 8, 6, 3, 1, 7, 9],
        [6, 2, 7, 4, 3, 9, 8, 1, 5],
        [5, 4, 3, 7, 8, 1, 9, 6, 2],
        [1, 9, 8, 5, 2, 6, 4, 3, 7]
      ])
    end
  end

  context "with hard puzzles" do
    it "will solve" do
      solution_1 = Sudoku.new([
        [5, 6, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 5, 0, 0, 6, 0],
        [0, 0, 7, 8, 3, 0, 4, 0, 0],
        [0, 0, 5, 3, 0, 1, 0, 0, 0],
        [7, 0, 0, 0, 0, 0, 2, 0, 6],
        [2, 0, 0, 0, 0, 7, 0, 5, 0],
        [0, 0, 0, 0, 0, 0, 5, 3, 0],
        [0, 5, 1, 4, 0, 0, 0, 0, 0],
        [4, 0, 0, 0, 0, 2, 0, 0, 0]
      ]).solve

      # TODO - this should solve
      expect(solution_1).to eq([
        [5, 6, 8, 2, 7, 4, 3, 9, 1],
        [3, 4, 2, 1, 5, 9, 7, 6, 8],
        [1, 9, 7, 8, 3, 6, 4, 2, 5],
        [6, 8, 5, 3, 2, 1, 9, 4, 7],
        [7, 3, 4, 9, 8, 5, 2, 1, 6],
        [2, 1, 9, 6, 4, 7, 8, 5, 3],
        [9, 2, 6, 7, 1, 8, 5, 3, 4],
        [8, 5, 1, 4, 9, 3, 6, 7, 2],
        [4, 7, 3, 5, 6, 2, 1, 8, 9]] )
    end
  end

  context "with the hardest puzzle" do
    it "will solve" do
      solution = Sudoku.new([
        [8, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 3, 6, 0, 0, 0, 0, 0],
        [0, 7, 0, 0, 9, 0, 2, 0, 0],
        [0, 5, 0, 0, 0, 7, 0, 0, 0],
        [0, 0, 0, 0, 4, 5, 7, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 3, 0],
        [0, 0, 1, 0, 0, 0, 0, 6, 8],
        [0, 0, 8, 5, 0, 0, 0, 1, 0],
        [0, 9, 0, 0, 0, 0, 4, 0, 0]
      ]).solve

      expect(solution).to eq([
        [8, 1, 2, 7, 5, 3, 6, 4, 9],
        [9, 4, 3, 6, 8, 2, 1, 7, 5],
        [6, 7, 5, 4, 9, 1, 2, 8, 3],
        [1, 5, 4, 2, 3, 7, 8, 9, 6],
        [3, 6, 9, 8, 4, 5, 7, 2, 1],
        [2, 8, 7, 1, 6, 9, 5, 3, 4],
        [5, 2, 1, 9, 7, 4, 3, 6, 8],
        [4, 3, 8, 5, 2, 6, 9, 1, 7],
        [7, 9, 6, 3, 1, 8, 4, 5, 2]
      ])
    end
  end
end